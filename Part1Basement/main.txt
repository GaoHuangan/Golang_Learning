package main

import (
	"fmt"
	"time"
)

// TIP <p>To run your code, right-click the code and select <b>Run</b>.</p> <p>Alternatively, click
// the <icon src="AllIcons.Actions.Execute"/> icon in the gutter and select the <b>Run</b> menu item from here.</p>
//
//	func add(a int, b int) int {
//		return a + b
//	}
//
// // 乘法
//
//	func clac(a int, b int) (int, int) {
//		return a + b, a * b
//	}
func main() {

	// buffered Channel
	bu := make(chan int, 3) //创建缓冲为3的bufferedChannel
	bu <- 1
	bu <- 2
	bu <- 3
	//bu <- 4

	fmt.Println(<-bu)
	fmt.Println("当前容量",len(bu),"容量",cap(bu))
	fmt.Println(<-bu)
	fmt.Println("当前容量",len(bu),"容量",cap(bu))
	fmt.Println(<-bu)
	//fmt.Println(<-bu)
	fmt.Println("job is finished")


	p := make(chan int)
	// start goroutine
	go sendNumber(p)
	for p := range p {
		fmt.Println(p)
	}

	//
	ch := make(chan string)
	go woker(ch)
	fmt.Println("等待协程完成。。。。。")
	msg := <-ch
	fmt.Println(msg)

	go sayHallo()               // 开启一个 goroutine
	time.Sleep(1 * time.Second) // 不然主线程提前结束了，看不到输出
	fmt.Println("main done")
	//go sayHello() 是异步调用。
	//
	//main() 不等待 sayHello()，必须 Sleep 一下让它完成。

	//🧠 第二步：理解 Channel（通道）
	//✅ 什么是 channel？
	//通道是 Go 用来在 goroutine 之间 通信的管道。
	//
	//通道可以安全地传递数据，不需要使用锁。

	dh := make(chan string) //创建一个字符串通道
	go sendMsg(dh)          // 开一个 goroutine 发送消息
	msg = <-dh
	fmt.Println(msg)

	////TIP <p>Press <shortcut actionId="ShowIntentionActions"/> when your caret is at the underlined text
	//// to see how GoLand suggests fixing the warning.</p><p>Alternatively, if available, click the lightbulb to view possible fixes.</p>
	//s := "gopher"
	//var age int = 25
	//name := "Nickel"
	//fmt.Println("私の名前は"+name+"年齢は：", age)
	//
	//if age > 18 {
	//	fmt.Println("adult")
	//} else {
	//	fmt.Println("Minor")
	//}
	//
	//switch day := "Monday"; day {
	//case "Monday":
	//	fmt.Println("start of week")
	//default:
	//	fmt.Println("normal day")
	//}
	//sum := 0
	//for i := 0; i < 10; i++ {
	//	sum += i
	//}
	//fmt.Println(sum)
	//
	//var arr [3]int = [3]int{1, 2, 3}
	//for i := 0; i < len(arr); i++ {
	//	fmt.Print(arr[i])
	//}
	//
	//slice := []int{1, 2, 3}
	//slice = append(slice, 4)
	//fmt.Println(slice)
	//
	//fmt.Println(add(1, 2))
	//fmt.Println(clac(1, 2))
	//
	//fmt.Printf("Hello and welcome, %s!\n", s)
	//
	//// 字典
	//m := make(map[string]int)
	//m["apple"] = 5
	//fmt.Println(m["apple"])
	//
	//type person struct {
	//	name string
	//	age  int
	//}
	//p := person{"nickel", 24}
	//fmt.Println(p.name, p.age)
	//
	//x := 10
	//k := &x         // 将K指向X地址所在位置
	//fmt.Println(*k) // 输出10
	//*k = 20         // 修改指针位置，x内存地址发生变化，指向新的地址
	//fmt.Println(x)  // 输出20
	//
	////for i := 1; i <= 5; i++ {
	////	//TIP <p>To start your debugging session, right-click your code in the editor and select the Debug option.</p> <p>We have set one <icon src="AllIcons.Debugger.Db_set_breakpoint"/> breakpoint
	////	// for you, but you can always add more by pressing <shortcut actionId="ToggleLineBreakpoint"/>.</p>
	////	fmt.Println("i =", 100/i)
	////}
}
s